<?php
/**
 * Created by PhpStorm.
 * User: Natasha Moffat
 * Date: 19/10/2014
 * Time: 3:08 PM
 */


ini_set('max_execution_time', 300);
ini_set("memory_limit","20M");
//ob_end_clean();
//ini_set('output_buffering', '0');

$stream = "";
$studentTotal = 0;

/* 
 *  Retrieves from the database the relevant fields in order to generate a mathematical model
 *	 in the form of a string which is written in the Optimisation Programming Language (OPL)
 *  The model uses Mixed Integer Programming which means the Simplex  algorithm will find a 
 *  floating point solution and then iterates around the integers using Branch and Bound. The 
 *  library used (GNU linear programming kit) also applies Gomory Cuts to increase efficiency.  
 *  It is important that the decision variables are generated by shifts for each person, person
 *	 by person. 
 * @return string  of OPL model to run simplex algorithm
 */

function GenerateOPL($stream){
		// Generate all data for all students. Database houses multiple rows per student.
		$studentPrefSQL = new \PHP\SqlObject("SELECT * FROM preferences JOIN facilitators ON facilitators.student_id = preferences.user_id  WHERE stream = :stream ORDER BY new_" .$stream." DESC, user_id ASC, day ASC", array(strtoupper($stream)));  
		$studentPrefRS = $studentPrefSQL->Execute();		
		
		// Collects all unique students in both preferences and facilitators. Index of studentID in array will be used to generate the input CPLEX string.
		$studentListSQL = new \PHP\SqlObject("SELECT student_id FROM preferences JOIN facilitators ON facilitators.student_id = preferences.user_id  WHERE stream = :stream GROUP BY user_id ORDER BY new_" . $stream . " DESC, user_id ASC", array($stream));  
		$studentListRS = $studentListSQL->Execute();		
		
		$studentArray = array();
		$studentTotal = 0;
		foreach ($studentListRS as $row) {
			$studentArray[$studentTotal] = $row['student_id'];
			$studentTotal++;
		}
		
		if ($studentTotal == 0){
			echo "Warning: No input data in database <br/>";
		}
		else if ($studentTotal < 8*5){
			echo "Warning: you have " . $studentTotal . " students. It is recommended that you wait for more students to submit preferences<br/>";
		}
		
		$totalHours = 0;
		$studentHours = array(); //TODONE create hours in db and then uncomment code below and edit for loop for generating relevant constraints
		foreach($studentPrefRS as $row) {
			$studentIndex = array_search($row['user_id'], $studentArray,true);
			$studentHours[$studentIndex] = $row["hours_" . $stream];
			$totalHours += $row["hours_" . $stream];
		}	
		
		// Generates array with ith student and jth shift, where j is calculated by day + shift
		$shiftTotal = 8; //TODONE maybe change to a value that calculated by counting number of columns in db after the stream field or whatever it is
		$startTime = 9;
		$daysTotal = 5;
		$dayArray = array(0,1,2,3,4);
		$prefArray = array();
		
		// For each student, retrieve and add their preferences and then calculate days where no data was stored in database (to save space in database)
		foreach($studentArray as $student) {
			
			$daysWithData = array();
			$daysWithoutData =array();
			
			// Generate data for the current student. 
			$studentSQL = new \PHP\SqlObject("SELECT * FROM preferences JOIN facilitators ON facilitators.student_id = preferences.user_id  WHERE stream = :stream AND user_id = :user ORDER BY user_id ASC, day ASC", array($stream, $student));  
			$studentRS = $studentSQL->Execute();		
			$studentIndex = array_search($studentRS[0][0], $studentArray, true);
			
			// go through each row and add all data
			$index = 0;
			foreach ($studentRS as $row) {
			
				for ($j = 0; $j < $shiftTotal; $j++){
					$prefArray[$studentIndex][$row['day']*$shiftTotal + $j] = $row[ ($j + $startTime -1) % 12 + 1];
					$daysWithData[$index] = $row['day'];
					$index++;
				}
			}
			
			// check what days where not data was added and add null entries worth -50 to the simplex algorithm
			$daysWithoutData = array_diff($dayArray, $daysWithData) ;
			foreach ($daysWithoutData as $day){
				for ($j = 0; $j < $shiftTotal; $j++){
					$prefArray[$studentIndex][$day*$shiftTotal + $j] = -50;
				}
			}
		}
		
		// iterate over each persons preferences to create objective function
		$objective = "\* Objective function *\  \nMaximize \nobj:" ;
		for ($person = 0; $person < $studentTotal; $person++){
			for ($shift = 0; $shift < $shiftTotal*$daysTotal; $shift++){
				$objective .= " +" . $prefArray[$person][$shift] . " x" . $person . "_" . $shift;
			}
		}
		// clean the objective function
		$objective = str_replace("+-", "-", $objective);
		
		// iterate over each persons to make sure each persons total weekly hours doesn't exceed their specified hours for that stream
		$constraint = "\n\n \* Constraints *\ \nSubject To \n";
		for ($person = 0; $person < $studentTotal; $person++){
			$constraint .= "person_" . $person . ":"; 
			for ($shift = 0; $shift < $shiftTotal*$daysTotal; $shift++){
				$constraint .=  " +x" . $person . "_" . $shift;
			}
			$constraint .= " = " . ($studentHours[$person] ) . "\n"; // decide whether <= or =
		}
		
		// iterate over each shift to make sure each shift has the specified number of people
		$numAtDesk = array ( 1, 1, 2, 2, 2, 2, 1, 1);
		for ($shift = 0; $shift < $shiftTotal*$daysTotal; $shift++){
			$constraint .= "shift_" . $shift .":";
			for ($person = 0; $person < $studentTotal; $person++){
				$constraint .=  " +x" . $person . "_" . $shift;
			}
			$constraint .= " <= " . ($numAtDesk[$shift % count($numAtDesk)]) . "\n";
		}

		$newPLFConstraint = false;
		// check that there are more volunteered hours than time slots, to prevent no feasible solution
		if ($totalHours  > $shiftTotal*$daysTotal) {
			
			$newTotalSQL= new \PHP\SqlObject("SELECT * FROM facilitators JOIN preferences ON facilitators.student_id = preferences.user_id WHERE stream = :stream AND new_" . $stream . " = 1;", array(strtoupper($stream)));
			$newTotalRS = $newTotalSQL->Execute();
			$newTotal = count($newTotalRS);
			
			// Check if this contraint should be generated by comparing shifts volunteered with new people
			// if there is 150% shift coverage, 1/3 of shifts will have two people, so need newTotal to be less than (1/3 - error)*$shiftTotal*$daysTotal 
			// if there is 120% shift coverage, 1/5 of shifts will have two people. so need newTotal to be less than (1/5 - error) *$shiftTotal*$daysTotal 
			// this is modelled by  (($totalHours / $shiftTotal/$daysTotal - 1 - $error)*$shiftTotal*$daysTotal) <= newTotal
			$constraintNewA = "";
			$constraintNewB = "";
				
			$error = 0.00;
			$minNew = 0.00;
			$minNew = floor(($totalHours)  - (1 + $error)*$shiftTotal*$daysTotal); 
			
			if  ($minNew  >= $newTotal) {
				
				$newPLFConstraint = true;
				// ensure new plfs are paired with old plfs.If y in newPLFa is true then b 
				// is effective, otherwise large m will make restraint redundant
				// Modelled on A - 1 + my < m,  1 - B - my <= 0
				$m = 10000; // arbitrarily large amount
				$constraintNewA = "";
				$constraintNewB = "";
				for ($shift = 0; $shift < $shiftTotal*$daysTotal; $shift++){
					$constraintNewA .= "newPLFa_" . $shift . ": "; 
					$constraintNewB .= "newPLFb_" . $shift . ":";
					
					for ($person = 0; $person < $newTotal; $person++){
						$constraintNewA .=  " +x" . $person . "_" . $shift;
					}
					for ($person = $newTotal; $person < $studentTotal; $person++){
						$constraintNewB .=  " -x" . $person . "_" . $shift;
					}
					
					$constraintNewA .= " +" . $m . "y" . $shift . " < " . ($m +1) . "\n";
					$constraintNewB .= " -" . $m . "y" . $shift . " <= " . -1 . "\n";
	
				}
				$constraint .= $constraintNewA . $constraintNewB;
			} else {
				echo "Warning: Not enough students hours to ensure new PLF's are with old PLFs <br/>";
			}
		} else {
			echo "Warning: Not enough students hours to ensure new PLF's are with old PLFs <br/>";
		}

		// Ensures all decision variables are binary (ie less than 1 and integer)
		$bounds = "\n\n\* Variable bounds *\ \nBounds \n";
		$integers = "\n\n\* Integer definitions *\ \nGeneral \n";	
		for ($shift = 0; $shift < $shiftTotal*$daysTotal; $shift++){
		
			for ($person = 0; $person < $studentTotal; $person++){
				$bounds .= " x" . $person . "_" . $shift . " <= 1 \n";
				$integers .=" x" . $person . "_" . $shift;
			}
			if ($newPLFConstraint){
				$bounds .= " y" . $shift . " <= 1 \n";
				$integers .= " y" . $shift; 
			}
		}

		// Collect all the strings to generate the input string
		$input = $objective . $constraint . $bounds . $integers . " \n\nEnd";
		
		//TODO: pass input string directly to algorithm, may need to change.
	
		return $input;
}

/*function ResultsToDatabase1(){
			
			// Return the javascript array of person, shift and value 
			if (isset($_POST['variable[]'])) {
					$results = $_POST['variable[]'];
					$entries = count($results);
					$shiftEntries = array( "9-10", "10-11", "11-12", "12-1", "1-2", "2-3", "3-4", "4-5");
					$dayEntries = array( "Monday", "Tuesday", "Wednesday", "Thursday", "Friday");
					
					// assume shift_ID goes from 0 to shiftnum,
					$sqlEntry = "INSERT INTO autogen_timetable (student_ID, shift_ID, stream, day, shift_time) VALUES";
					foreach ($results as $entry){
						$sqlEntry = "( `". array_search($entry[1], $studentArray)  . "`, " . $entry[2] . ", `" . $stream . "`"; 
						$sqlEntry .= ", `"  . $dayEntries(floor($entry[3] / $shiftTotal)) . "`, `" . $shiftEntries[$entry[3] % $shiftTotal] . "` ), ";
						//TODONE: the final "," breaks stuff. check if final "," causes sql error and if variable names have spaces at the start

					}
					
					// add constructed table to database
					$automaticTable = new \PHP\SqlObject("$sqlEntry", array());
					$automaticTable->Execute();
			}
}*/


/* 
 *  Takes in the results array, a position in the array, the current number of consecutive 
 *   entries and the total number of shifts in a day.  It checks the next entry in the array 
 *   to see if there is are consecutive shifts. There is no don't need to search for shifts 
 *   because the results array is already sorted by person then shift
 * @return bool true when next entry is consecutive
 */
function NextIsConsec($arrayResults, $i, $consec, $total){
	
	// while the next person is the same for the next entry keep checking
	if ($results[i + $consec + 1][0] == $results[i + $consec][0]){
		// check the next person has a shift for the next entry 
		 if ($results[i + $consex + 1][2] == 1){
			// check that it's the next shift on the same day
			if ($results[i + $consec + 1][2] % $total == $results[i + $consec][2] % $total + 1){ 
				return true;
			}
		 }	
	}
} 


/* 
 *  Takes the [posted variable and processes the results, prepares the sql and updates the 
 *   temporary database.  deletes 
 * @return Auto_Gen_Timetable inserted with rows, old data deleted
 */
function ResultsToDatabase(){
	echo "inside results";
	// Return the javascript array of person, shift and value 
	if (isset($_POST['variable'])) {
		echo "processing";
		$clearTableSQL = new \PHP\SqlObject("$DELETE FROM `Auto_Gen_Timetable`", array());
		$clearTable = $clearTableSQL->Execute();
		
		$results = $_POST['variable'];
		$entries = count($results);
		$streamsArray = array( 'dh' => 1, 'it' => 2, 'ma' => 3, 'sc' => 4);
		$timesArray = array( "9:00", "10:00", "11:00", "12:00","1:00", "2:00", "3:00", "4:00");
		//$shiftEntries = array( "9-10", "10-11", "11-12", "12-1", "1-2", "2-3", "3-4", "4-5");
		//$dayEntries = array( "Monday", "Tuesday", "Wednesday", "Thursday", "Friday");
		
		// assume shift_ID goes from 0 to shiftnum,
		// student_ID, shift_ID, stream, day, shift_time)
		/////////$redundantRow; //array_push($redundantRow, i + $consec+1);
		$sqlEntry = "INSERT INTO autogen_timetable (student_ID, shi_stream, shi_day, shi_time, shi_duration VALUES";
		for ($i = 0;  $i < $entries; $i ++) {
				
			// process if it's optimal for the ith shift/person combo to be true
			if ($results[i][2] == 1) {
				$student_ID =  $studentArray($entry[1]); //array_search($entry[1], $studentArray);
				$shi_stream = $streamArray[$stream];
				$shi_day = floor($entry[1] / $shiftTotal);
				$shi_time = $timesArray[$entry[1] % $shiftTotal] ;
					
				// Check for consecutive shifts. 
				//Check next shift/person is same person, check there is a shift for that person, check its on the same day, check its the next shift. 
				$consec = 0;
				while (NextIsConsec($results, $i, $consec, $shiftTotal)) {
					$i++;
					$consec++;
				}
				$shi_duration = $consec + 1;
				
				$sqlEntry = "( '". $student_ID  . "', $shi_stream , $shi_day , ";
				$sqlEntry .= "'" . $shi_time  . "' $shi_duration . ), ";
			}
		}

		$sqlEntry = rtrim($sqlEntry,",");
		
		// add constructed table to database
		$automaticTableSQL = new \PHP\SqlObject("$sqlEntry", array());
		$automaticTable = $automaticTableSQL->Execute();
		echo "Temporary Table Generated";
	}
	echo "not seeing post";
}